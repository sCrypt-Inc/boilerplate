import "../../../contracts/bn256.scrypt";

contract BN256CurveTest {

    public function testMulFQ2(FQ2 a, FQ2 b, FQ2 res) {
        require(BN256.mulFQ2(a, b) == res);
    }

    public function testSquareFQ2(FQ2 a, FQ2 res) {
        require(BN256.squareFQ2(a) == res);
    }

    public function testInvFQ2(FQ2 a, FQ2 res) {
        require(BN256.inverseFQ2(a) == res);
    }

    public function testMulFQ6(FQ6 a, FQ6 b, FQ6 res) {
        require(BN256.mulFQ6(a, b) == res);
    }

    public function testSquareFQ6(FQ6 a, FQ6 res) {
        require(BN256.squareFQ6(a) == res);
    }

    public function testInverseFQ12(FQ12 a, FQ12 res) {
        require(BN256.inverseFQ12(a) == res);
    }

    public function testSquareFQ12(FQ12 a, FQ12 res) {
        require(BN256.squareFQ12(a) == res);
    }

    public function testExpFQ12(FQ12 a, int power, FQ12 res) {
        require(BN256.expFQ12(a, power) == res);
    }

    public function testExpFQ12_u(FQ12 a, FQ12 res) {
        require(BN256.expFQ12_u(a) == res);
    }

    public function testFrobeniusFQ12(FQ12 a, FQ12 res) {
        require(BN256.frobeniusFQ12(a) == res);
    }

    public function testFrobeniusP2FQ12(FQ12 a, FQ12 res) {
        require(BN256.frobeniusP2FQ12(a) == res);
    }

    public function testMulFQ12(FQ12 a, FQ12 b, FQ12 res) {
        require(BN256.mulFQ12(a, b) == res);
    }

    public function testDoubleCurvePoint(CurvePoint a, CurvePoint res) {
        require(BN256.doubleCurvePoint(a) == res);
    }

    public function testAddCurvePoints(CurvePoint a, CurvePoint b, CurvePoint res) {
        require(BN256.addCurvePoints(a, b) == res);
    }

    public function testMakeAffineCurvePoint(CurvePoint a, CurvePoint res) {
        require(BN256.makeAffineCurvePoint(a) == res);
    }

    public function testMulCurvePoint(CurvePoint a, int scalar, CurvePoint res) {
        require(BN256.mulCurvePoint(a, scalar) == res);
    }

    public function testDoubleTwistPoint(TwistPoint a, TwistPoint res) {
        require(BN256.doubleTwistPoint(a) == res);
    }

    public function testAddTwistPoints(TwistPoint a, TwistPoint b, TwistPoint res) {
        require(BN256.addTwistPoints(a, b) == res);
    }

    public function testMakeAffineTwistPoint(TwistPoint a, TwistPoint res) {
        require(BN256.makeAffineTwistPoint(a) == res);
    }

}

