contract Asm {
    public function double(int a, int b) {
        asm {
            OP_DUP
            OP_ADD
            OP_NUMEQUAL
        }
    }

    function equalImpl(int a) : bool {
        // mix all
        asm {
            $x
            ab12
            OP_SIZE
            OP_NIP
            OP_MUL
            OP_1
            OP_MUL
            $x
            OP_SUB
            OP_EQUAL
        }
    }

    public function equal(int a) {
        require(this.equalImpl(a));
    }

    public function p2pkh(Sig sig, PubKey pubKey) {
        asm {
            OP_DUP
            OP_HASH160
            $pkh
            OP_EQUALVERIFY
            OP_CHECKSIG
        }
    }

    function len(bytes b) : int {
        asm {
            OP_SIZE
            OP_NIP
        }
    }

    function lenFail(bytes b) : int {
        // this is wrong since the last value on stack will be considered as the return value
        asm {
            OP_SIZE
            OP_0
        }
    }

    public function checkLen(bytes b, int l) {
        require(this.len(b) == l);
        require(this.len(b) == l);
        require(this.len(b) == l);
    }

    public function checkLenFail(bytes b, int l) {
        // expect to fail after multiple calls since the stack is messed
        require(this.lenFail(b) == l);
        require(this.lenFail(b) == l);
    }
}