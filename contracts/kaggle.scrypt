import "serializer.scrypt";

struct Submission {
    int heightWeight;
    // 1st "weight" prefix means weight in KGs
    int weightWeight;
    int bias;

    // payout address
    Ripemd160 addr;
}

type Gender = int;

// data point in dataset
struct DataPoint {
    // inputs
    // in CMs
    int height;
    // in KGs
    int weight;

    // outputs
    // correct classification of gender: 0 means female, 1 male
    Gender gender;
}

type Submissions = Submission[Kaggle.S];

struct States {
    // submissions
    Submissions submissions;
    int count;
}

/*
 * An on-chain Kaggle competition
 */
contract Kaggle {

    @state
    States states;

    // size of training dataset
    static const int N = 5;
    // size of testing dataset
    static const int T = 10;
    // max number of submissions
    static const int S = 6;

    // training dataset
    DataPoint[N] trainingDataset;

    // hash of testing dataset
    Sha256 testingDatasetHash;


    // submit a solution
    public function submit(SigHashPreimage txPreimage, Submission subm) {
        // append the submission to the candidates
        if (++this.states.count < S) {
            loop (S) : i {
                if (i == this.states.count)
                    this.states.submissions[i] = subm;
            }
        }

        bytes outputScript = this.getStateScript();
        bytes output = Utils.buildOutput(outputScript, SigHash.value(txPreimage));
        require(this.propagateState(txPreimage, output));
    }

    // reveal the testing dataset and pay the winner with smallest error
    public function evaluate(SigHashPreimage txPreimage, DataPoint[T] testingDataset) {
        // validate testing dataset is what was committed
        require(this.validateTestData(testingDataset));

        // find the winner with the miminal predicted error
        Ripemd160 winner = Ripemd160(b'');
        int minError = 0xFFFFFFFFFFF;
        loop (S) : i {
            if (i < this.states.count) {
                auto subm = this.states.submissions[i];
                auto error = calcError(subm, testingDataset);
                if (error < minError) {
                    minError = error;
                    winner = subm.addr;
                }
            }
        }
        
        bytes output = Utils.buildOutput(Utils.buildPublicKeyHashScript(winner), SigHash.value(txPreimage));
        require(this.propagateState(txPreimage, output));
    }

    // calculate error
    static function calcError(Submission subm, DataPoint[T] trainingDataset) : int {
        int sum = 0;

        loop (T) : i {
            int prediction = predict(subm, trainingDataset[i]);
            int delta = trainingDataset[i].gender - prediction;
            // use square error
            sum += delta * delta;
        }
        return sum;
    }

    // predicted output
    static function predict(Submission s, DataPoint dataPoint) : int {
        int sum = s.bias;
        sum += dataPoint.height * s.heightWeight + dataPoint.weight * s.weightWeight;
        return stepActivate(sum);
    }


    // binary step function
    static function stepActivate(int sum) : Gender {
        return (sum >= 0 ? 1 : 0);
    }

    function validateTestData(DataPoint[T] testingDataset): bool {
        return this.testingDatasetHash == hash256(serializeDataPoints(testingDataset));
    }

    static function serializeDataPoints(DataPoint[T] dataset) : bytes {
        bytes sBuf = b'';
        loop (T) : i {
            auto dp = dataset[i];
            sBuf += Writer.writeInt(dp.height) + Writer.writeInt(dp.weight) + Writer.writeInt(dp.gender);
        }
        return sBuf;
    }

    function propagateState(SigHashPreimage txPreimage, bytes outputs) : bool {
        require(Tx.checkPreimage(txPreimage));
        return (hash256(outputs) == SigHash.hashOutputs(txPreimage));
    }
}
