import "liberc20.scrypt";

contract Uniswap {
    // pool's public key
    PubKey poolPubkey;

    // the main token
    @state
    ERC20 token;

    // the liquidity pool governance token
    @state
    ERC20 lpToken;

    // add bitcoin and token to liquidity pool
    public function addLiquidity(SortedItem<PubKey> sender, Sig senderSig, int tokenAmount, int senderBalance, int senderKeyIndex, int oldTokenBalance,
                                int lpSenderBalance, int newBitcoinBalance, SigHashPreimage txPreimage) {
        require(checkSig(senderSig, sender.item));

        int oldBitcoinBalance = SigHash.value(txPreimage);
        
        // mint new lp tokens for the liquidity provider
        if (oldBitcoinBalance == 0) {
            // initialize pool
            
            // initially, just mint new lp tokens per the amount of new bitcoins deposited
            int lpMint = newBitcoinBalance;
            require(this.lpToken.mint(sender, lpSenderBalance, lpMint));
        } else {
            // add more liquidity

            int bitcoinAmount = newBitcoinBalance - oldBitcoinBalance;
            
            // deposit ratio must be the same with current pool ration
            // i.e., oldBitcoinBalance / oldTokenBalance == bitcoinAmount / tokenAmount
            require(oldBitcoinBalance * tokenAmount == bitcoinAmount * oldTokenBalance);

            // mint new lp tokens, proportinal to the amount of new bitcoins deposited
            int lpMint = this.lpToken.totalSupply() * bitcoinAmount / oldBitcoinBalance;
            require(this.lpToken.mint(sender, lpSenderBalance, lpMint));
        }

        // transfer tokens to the pool
        require(this.token.transferFrom(sender, {this.poolPubkey, senderKeyIndex} , tokenAmount, senderBalance, oldTokenBalance));
        
        require(this.updateStateSigHashType(txPreimage, newBitcoinBalance, SigHash.SINGLE | SigHash.FORKID));
    }

    // remove bitcoin and token from liquidity pool
    public function removeLiquidity(SortedItem<PubKey> sender, int lpAmount, Sig senderSig, int oldTokenBalance, int senderKeyIndex, int senderBalance,
                                    int lpSenderBalance, int lpSenderKeyIndex, SigHashPreimage txPreimage) {
        require(checkSig(senderSig, sender.item));

        int oldBitcoinBalance = SigHash.value(txPreimage);
        
        // withdraw amount
        int bitcoinAmount = oldBitcoinBalance * lpAmount / this.lpToken.totalSupply();
        int tokenAmount = oldTokenBalance * lpAmount / this.lpToken.totalSupply();

        // burn the lp tokens
        require(this.lpToken.burn(sender, lpSenderBalance, lpAmount));

        // transfer tokens from pool to the sender
        require(this.token.transferFrom({this.poolPubkey, senderKeyIndex} , sender, tokenAmount, oldTokenBalance,  senderBalance));
        // transfer bitcoins to the sender
        int newBitcoinBalance = oldBitcoinBalance - bitcoinAmount;
        
        require(this.updateStateSigHashType(txPreimage, newBitcoinBalance, SigHash.SINGLE | SigHash.FORKID));
    }

    // swap tokens for bitcoins
    public function swapTokenToBitcoin(SortedItem<PubKey> sender, int tokenAmount, Sig senderSig, int senderBalance, int senderKeyIndex, int oldTokenBalance,
                                int lpSenderBalance, SigHashPreimage txPreimage) {
        require(checkSig(senderSig, sender.item));

        int oldBitcoinBalance = SigHash.value(txPreimage);

        // calculate bitcoins in return
        int bitcoinsAmount = this.getAmount(tokenAmount, oldTokenBalance, oldBitcoinBalance);
        int newBitcoinBalance = oldBitcoinBalance - bitcoinsAmount;

        // transfer tokens to the pool
        require(this.token.transferFrom(sender, {this.poolPubkey, senderKeyIndex} , tokenAmount, senderBalance, oldTokenBalance));        
        
        require(this.updateStateSigHashType(txPreimage, newBitcoinBalance, SigHash.SINGLE | SigHash.FORKID));
    }

    // swap bitcoins for tokens
    public function swapBitcoinToToken(SortedItem<PubKey> sender, int tokenAmount, Sig senderSig, int oldTokenBalance, int senderKeyIndex, int senderBalance,
                                        int newBitcoinBalance, SigHashPreimage txPreimage) {
        require(checkSig(senderSig, sender.item));

        int oldBitcoinBalance = SigHash.value(txPreimage);
        int bitcoinAmount = newBitcoinBalance - oldBitcoinBalance;

        // calculate tokens in return
        int tokensAmount = this.getAmount(bitcoinAmount, oldBitcoinBalance, oldTokenBalance);

        // transfer tokens from pool to the sender
        require(this.token.transferFrom({this.poolPubkey,senderKeyIndex}, sender, tokensAmount, oldTokenBalance, senderBalance));

        require(this.updateStateSigHashType(txPreimage, newBitcoinBalance, SigHash.SINGLE | SigHash.FORKID));
    }

    // use reserve ratio as price
    function getAmount(int input, int inputReserve, int outputReserve) : int {
        return outputReserve * input / inputReserve;
    }

}
