import "util.scrypt";

/**
 * Two players play Rock Paper Scissors
 *
 * Game start by player A, put some bsv in the contract,
 * then player B follow, put half bsv in the contract,
 * then player A finish it.
 */
contract RockPaperScissors {
  static const int INIT = 0;
  static const int ROCK = 1;
  static const int PAPER = 2;
  static const int SCISSORS = 3;

  public function follow(SigHashPreimage txPreimage, int action, Ripemd160 playerBpkh, int satoshiAmount) {
    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // valid action
    require(action > 0 && action < 4);

    bytes lockingScript = Util.scriptCode(txPreimage);
    int scriptLen = len(lockingScript);

    // init action
    int initAction = unpack(lockingScript[scriptLen - Util.DataLen : ]);
    require(initAction == RockPaperScissors.INIT);

    int satoshiInit = Util.value(txPreimage);
    bytes codePart = lockingScript[ : scriptLen - Util.PubKeyHashLen - Util.DataLen];

    bytes outputScript0 = codePart + playerBpkh + num2bin(action, Util.DataLen);
    bytes output0 = Util.buildOutput(outputScript0, satoshiInit * 3 / 2);

    bytes lockingScript1 = Util.buildPublicKeyHashScript(playerBpkh);
    bytes output1 = Util.buildOutput(lockingScript1, satoshiAmount);

    Sha256 hashOutputs = hash256(output0 + output1);

    require(hashOutputs == Util.hashOutputs(txPreimage));
  }

  public function finish(SigHashPreimage txPreimage, int action, Sig sig, PubKey playerA, int satoshiAmountA) {
    SigHashType sigHashType = SigHash.ANYONECANPAY | SigHash.ALL | SigHash.FORKID;
    // this ensures the preimage is for the current tx
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    // valid action
    require(action > 0 && action < 4);

    int satoshiTotal = Util.value(txPreimage);
    bytes lockingScript = Util.scriptCode(txPreimage);
    int scriptLen = len(lockingScript);

    int bAction = unpack(lockingScript[scriptLen - Util.DataLen : ]);
    require(bAction != RockPaperScissors.INIT);

    Ripemd160 playerAdata = Ripemd160(lockingScript[scriptLen - Util.PubKeyHashLen*2 - Util.DataLen : scriptLen - Util.PubKeyHashLen - Util.DataLen]);
    // authorize
    require(hash160(num2bin(action, Util.DataLen) + playerA) == playerAdata);
    require(checkSig(sig, playerA));

    int satoshiAmountB = satoshiTotal * 1 / 3;
    if (action ==(bAction % 3 + 1)) {
      // a win
      satoshiAmountB = 0;
    }
    else if (bAction ==(action % 3 + 1)) {
      // a lose
      satoshiAmountB = satoshiTotal * 2 / 3;
    }

    Ripemd160 playerApkh =  Ripemd160(hash160(playerA));
    bytes lockingScript0 = Util.buildPublicKeyHashScript(playerApkh);
    bytes output0 = Util.buildOutput(lockingScript0, satoshiAmountA);

    bytes output1 = b'';
    if (satoshiAmountB > 0) {
      Ripemd160 playerBpkh = Ripemd160(lockingScript[scriptLen - Util.PubKeyHashLen - Util.DataLen : scriptLen - Util.DataLen]);
      bytes lockingScript1 = Util.buildPublicKeyHashScript(playerBpkh);
      output1 = Util.buildOutput(lockingScript1, satoshiAmountB);
    }

    Sha256 hashOutputs = hash256(output0 + output1);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }
}
