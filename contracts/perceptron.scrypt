import "serializer.scrypt";

// Perceptron's internal state includes 2 inputs: height & weight
struct States {
    int heightWeight;
    // 1st weight means weight in KGs
    int weightWeight;
    int bias;
}

struct Input {
    // in CMs
    int height;
    // in KGs
    int weight;
}

// correct classification of gender: 0 means female, 1 male
type Output = int;

/*
 * A simple perceptron classifying gender based on height & weight
 */
contract Perceptron {

    @state
    States states;
    // sample size
    static const int N = 10;
    // learning rate
    static const int LR = 1;

    // training data set
    // inputs
    Input[N] inputs;
    // outputs
    Output[N] outputs;

    // train the perceptron
    function train(States s) : States {
        loop (N) : i {
            int prediction = this.predict(s, i);
            int delta = this.outputs[i] - prediction;
            s = this.adjust(s, delta);
        }
        return s;
    }

    // prediction for the i-th input
    function predict(States s, int i) : int {
        int sum = s.bias;
        sum += this.inputs[i].height * s.heightWeight + this.inputs[i].weight * s.weightWeight;
        return stepActivate(sum);
    }

    // learn internal state
    function adjust(States s, int delta) : States {
        int scaledDelta = delta * LR;
        loop (N) : i {
            s.heightWeight += this.inputs[i].height * scaledDelta;
            s.weightWeight += this.inputs[i].weight * scaledDelta;
        }
        s.bias += scaledDelta;
        return s;
    }

    // binary step function
    static function stepActivate(int sum) : int {
        return (sum >= 0 ? 1 : 0);
    }

    public function main(SigHashPreimage txPreimage, int amount) {
        // train the perceptron
        this.states = this.train(this.states);

        // write/serialize state
        require(this.updateState(txPreimage, amount));
    }
}
