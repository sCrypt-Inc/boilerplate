library VDFVerifierWeslowski {

    static const int RSA_MODULUS = 25195908475657893494027183240048398571429282126204032027777137836043662020707595556264018525880784406918290641249515082189298559149176184502808489120072844992687392807287776735971418347270261896375014971824691165077613379859095700097330459748808428401797429100642458691817195118746121515172654632282216869987549182422433637259085141865462043576798423387184774447920739934236584823824281198163815010674810451660377306056201619676256133844143603833904414952634432190114657544454178424020924616515723350778707749817125772467962926386356373289912154831438167899885040445364023527381951378636564391212010397122822120720357;
    static const int MILLER_RABIN_ROUNDS = 15;
    static const int MAX_NONCE = 65536;   
    
    static function verify(int g, int pi, int y, int q, int nonce, int delay) : bool {
        bool ret = true;

        ret = ret && nonce <= MAX_NONCE;
        ret = ret && g != 0 && g < RSA_MODULUS;
        ret = ret && pi != 0 && pi < RSA_MODULUS;
        ret = ret && y != 0 && y < RSA_MODULUS;
        ret = ret && q < RSA_MODULUS;

        int l = hashToPrime(g, y, nonce);
        ret = ret && millerRabinPrimalityTest(l);

        int r = modReduce(1 << delay, MAX_NONCE);
        int u1 = modexp(pi, l, RSA_MODULUS); // TODO: can optimize because of static modulus
        int u2 = modexp(g, r, RSA_MODULUS);
        return ret && (mulmod(u1, u2, RSA_MODULUS) == y);
    }
    
    static function hashToPrime(int g, int y, int nonce) : int {
        // num2bin requires one more byte for sign information.
        // We can throw this byte away after the conversion.
        bytes gBytes = reverseBytes(num2bin(g, 257)[:256], 256);
        bytes yBytes = reverseBytes(num2bin(y, 257)[:256], 256);
        bytes nonceBytes = reverseBytes(num2bin(nonce, 33)[:32], 32);

        int l = unpack(reverseBytes(sha256(gBytes + yBytes + nonceBytes), 32) + b'00');
        if ((l & 1) == 0) {
            l += 1;
        }

        return l;
    }

    static function millerRabinPrimalityTest(int n) : bool {
        require(n <= (1 << 256)); // This is function is made for the range of SHA256 hashes.

        bool res = true;

        if (n >= 4 && (n & 1) != 0) {
            int d = n - 1;
            int r = 0;
            
            loop (256) {
                if ((d & 1) == 0) {
                    d = d >> 1;
                    r += 1;
                }
            }
            
            loop (MILLER_RABIN_ROUNDS) : i {
                // pick a random integer a in the range [2, n âˆ’ 2]
                bytes nBytes = num2bin(n, 33);
                bytes iBytes = num2bin(i, 2);
                int hashRes = unpack(sha256(nBytes + iBytes));
                int a = (hashRes % (n - 3)) + 2;

                int x = modexp(a, d, n);
                if (x != 1 && x != n - 1) {
                    bool checkPassed = false;

                    int j = 1;
                    loop (256) {
                        if (j < r) {
                            x = mulmod(x, x, n);
                            if (x == n - 1) {
                                checkPassed = true;
                                j = r; // Emulates break;
                            }
                            j++;
                        }
                    }
                    
                    res = checkPassed;
                }
            }
        } else {
            res = false;
        }

        return res;
    }

    static function modexp(int base, int exponent, int modulus) : int {
        require(exponent >= 0);
        require(exponent <= (1 << 256)); // Exponent needs to be in the range of SHA256 output.
        
        int res = 1;
        
        loop (256) {
            if (exponent != 0) {
                if ((exponent & 1) == 1) {
                   res = mulmod(res, base, modulus);
                }
                base = mulmod(base, base, modulus);
                exponent = exponent >> 1;
            }
        }

        return res;
    }

    static function mulmod(int a, int b, int modulus) : int {
        return modReduce(a * b, modulus);
    }

    static function modReduce(int k, int modulus) : int {
        int res = k % modulus;
        return (res < 0) ? res + modulus : res;
    }

}
