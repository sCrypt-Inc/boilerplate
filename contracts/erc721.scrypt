// a basic ERC721-like non-fungible token
contract ERC721 {
    PubKey minter;

    @state
    HashedMap<int, PubKey> owners;

    // mint a new token to receiver
    public function mint(PubKey to, SortedItem<int> tokenId, Sig minterSig, int keyIndex, SigHashPreimage preimage) {
        // token not minted
        require(this.owners.has(tokenId));
        // authenticate
        require(checkSig(minterSig, this.minter));

        require(this.owners.set(tokenId, to));

        require(this.updateStateSigHashType(preimage, SigHash.value(preimage), SigHash.SINGLE | SigHash.FORKID));
    }

    // transfer a token from sender to receiver
    public function burn(SortedItem<int> tokenId, PubKey from, Sig fromSig, int keyIndex, SigHashPreimage preimage) {
        // verify ownership
        require(this.owners.canGet(tokenId, from));
        // authenticate
        require(checkSig(fromSig, from));

        require(this.owners.delete(tokenId));

        require(this.updateStateSigHashType(preimage, SigHash.value(preimage), SigHash.SINGLE | SigHash.FORKID));
    }

    public function transferFrom(PubKey from, PubKey to, Sig fromSig, SortedItem<int> tokenId, int keyIndex, SigHashPreimage preimage) {
        // verify ownership
        require(this.owners.canGet(tokenId, from));
        // authenticate
        require(checkSig(fromSig, from));

        require(this.owners.set(tokenId, to));
    
        require(this.updateStateSigHashType(preimage, SigHash.value(preimage), SigHash.SINGLE | SigHash.FORKID));
    }
}